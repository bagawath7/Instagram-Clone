//
//  NotificationsViewController.swift
//  Instagram-Clone
//
//  Created by zs-mac-4 on 24/11/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol NotificationsDisplayLogic: AnyObject{
    func updatenotifications(notifications:[Notification])
    func ViewPostInUserFeedController(post:UserfeedModel.ViewModel.Post)
}

class NotificationsViewController: UITableViewController, NotificationsDisplayLogic
{
    func ViewPostInUserFeedController(post: UserfeedModel.ViewModel.Post) {
        let controller = UserfeedViewController(collectionViewLayout: UICollectionViewFlowLayout())
        controller.post = post
        self.showloader(false)
        self.navigationController?.pushViewController(controller, animated: true)
    }
    
    func updatenotifications(notifications: [Notification]) {
        self.notifications = notifications
        self.checkIfUserIsFollowed()
    }
    
    private let reuseIdentifier = "NotificartionCell"

    private var notifications = [Notification](){
        didSet{
            tableView.reloadData()
        }
    }
    
    private let refresher = UIRefreshControl()
    var interactor: NotificationsBusinessLogic?
    
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        setup()
        configureTableView()
        interactor?.fetchNotification()
    }
    
    
    
    func checkIfUserIsFollowed(){
        notifications.forEach { notification in
            guard notification.type == .follow else {return}
            ProfileWorker.checkIfUserIsFollowed(uid: notification.uid) { isFollowed in
                if let index  = self.notifications.firstIndex(where: {$0.id == notification.id}){
                    self.notifications[index].userIsFollowed = isFollowed
                }
            }
        }
    }
    
    
    //MARK: - Healpers
    
    func  configureTableView(){
        view.backgroundColor = .white
        navigationItem.title = "Notifications"
        tableView.register(NotificationCell.self, forCellReuseIdentifier: reuseIdentifier)
        tableView.rowHeight = 80
        tableView.separatorStyle = .none
        
        refresher.addTarget(self, action:#selector(handleRefresh) , for: .valueChanged)
        tableView.refreshControl = refresher
        
    }
    private func setup()
    {
        let viewController = self
        let interactor = NotificationsInteractor()
        let presenter = NotificationsPresenter()
        viewController.interactor = interactor
        interactor.presenter = presenter
        presenter.viewController = viewController
    }
    
    @objc func handleRefresh(){
        notifications.removeAll()
        interactor?.fetchNotification()
        refresher.endRefreshing()
    }
    
}

//MARK: UITableViewDataSource

extension NotificationsViewController{
    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return notifications.count
    }
    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: reuseIdentifier, for: indexPath) as! NotificationCell
        cell.delegate = self
        cell.viewmodel = NotificaitonViewModel(notification: notifications[indexPath.row])
        return  cell
    }
}

//MARK: UITableViewDataSource

extension NotificationsViewController{
    
    override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        showloader(true)
        UserfeedWorker.fetchuser(withUid: notifications[indexPath.row].uid) { user in
            let controller = ProfileViewController(user: user)
            self.navigationController?.pushViewController(controller, animated: true)
            
            self.showloader(false)
        }
    }
}

//MARK: NotificationCellDelegate
extension NotificationsViewController:NotificationCellDelegate{
    func cell(_ cell: NotificationCell, wantsToFollow uid: String) {
        showloader(true)

        ProfileWorker.follow(uid: uid) { _ in
            cell.viewmodel?.notification.userIsFollowed.toggle()
            self.showloader(false)


        }
    }
    
    func cell(_ cell: NotificationCell, wantsToUnfollow uid: String) {
        showloader(true)

        ProfileWorker.unfollow(uid: uid) { _ in
            cell.viewmodel?.notification.userIsFollowed.toggle()
            self.showloader(false)


        }

    }
    
    func cell(_ cell: NotificationCell, wantsToViewPost PostId: String) {
        showloader(true)

        interactor?.fetchPost(withPost: PostId)
        
    }
    
    
    
}
